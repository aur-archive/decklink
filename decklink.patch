diff --git a/usr/src/blackmagic-10.4a17/blackmagic_core.c b/usr/src/blackmagic-10.4a17/blackmagic_core.c
index a471cbd..f312961 100644
--- a/usr/src/blackmagic-10.4a17/blackmagic_core.c
+++ b/usr/src/blackmagic-10.4a17/blackmagic_core.c
@@ -7,14 +7,14 @@
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
-** 
+**
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
-** 
+**
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
@@ -160,12 +160,12 @@ static irqreturn_t blackmagic_isr(int irq, void *dev)
 {
     unsigned int status;
 	struct blackmagic_device *ddev = (struct blackmagic_device *)dev;
-	
+
 	if (!ddev)
 		return IRQ_NONE;
-	
+
 	status = dl_interrupt_handler(ddev->driver);
-	
+
 	if (status & DL_INTERRUPT_SCHED_TASKLET)
     {
 		tasklet_schedule(&ddev->tasklet);
@@ -173,7 +173,7 @@ static irqreturn_t blackmagic_isr(int irq, void *dev)
 	}
 	else if (status & DL_INTERRUPT_HANDLED)
 		return IRQ_HANDLED;
-	
+
 	return IRQ_NONE;
 }
 
@@ -184,7 +184,9 @@ static int blackmagic_open(struct inode *inode, struct file *filp)
 {
 	struct blackmagic_device *ddev;
 	void *uclient;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+	ddev = blackmagic_find_device_by_minor(iminor(file_inode(filp)));
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
 	//NOTE: inode is/may be NULL on >=2.6.36
 	ddev = blackmagic_find_device_by_minor(iminor(filp->f_dentry->d_inode));
 #else
@@ -193,7 +195,7 @@ static int blackmagic_open(struct inode *inode, struct file *filp)
 
 	if (!ddev)
 		return -ENODEV;
-	
+
 	if (!atomic_read(&ddev->ready))
 		return -EBUSY;
 
@@ -208,7 +210,9 @@ static int blackmagic_open(struct inode *inode, struct file *filp)
 static int blackmagic_release(struct inode *inode, struct file *filp)
 {
 	struct blackmagic_device *ddev;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+	ddev = blackmagic_find_device_by_minor(iminor(file_inode(filp)));
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
 	ddev = blackmagic_find_device_by_minor(iminor(filp->f_dentry->d_inode));
 #else
 	ddev = blackmagic_find_device_by_minor(iminor(inode));
@@ -217,7 +221,7 @@ static int blackmagic_release(struct inode *inode, struct file *filp)
 	if (!ddev)
 		return -ENODEV;
 
-	/* try to close the serial port in case it was opened in IOCTL mode 
+	/* try to close the serial port in case it was opened in IOCTL mode
 	 * (does nothing if the serial port was closed or opened through TTY layer)
 	 */
 	blackmagic_serial_close_ioctl(ddev->driver);
@@ -238,17 +242,23 @@ blackmagic_ioctl(struct inode *inode, struct file *filp,
 {
 	struct blackmagic_device *ddev;
 #if HAVE_UNLOCKED_IOCTL
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+	ddev = blackmagic_find_device_by_minor(iminor(file_inode(filp)));
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
 	ddev = blackmagic_find_device_by_minor(iminor(filp->f_dentry->d_inode));
 #else
 	ddev = blackmagic_find_device_by_minor(iminor(inode));
 #endif
-	
+#else
+	ddev = blackmagic_find_device_by_minor(iminor(inode));
+#endif
+
 	if (!ddev)
 		return -ENODEV;
-	
+
 	if (!filp->private_data)
 		return -ENODEV;
-	
+
 	return blackmagic_ioctl_private(ddev->driver, filp->private_data, cmd, arg);
 }
 
@@ -362,13 +372,13 @@ blackmagic_create_device(struct pci_dev *pdev)
 {
 	struct blackmagic_device *ddev = NULL;
 	char *name = NULL;
-	
+
 	ddev = kzalloc(sizeof(struct blackmagic_device), GFP_KERNEL);
-	if (!ddev) 
+	if (!ddev)
 		return NULL;
 
 	ddev->id = -1;
-	
+
 	name = kzalloc(NAME_MAX_LEN, GFP_KERNEL);
 	if (!name)
 		goto fail;
@@ -378,7 +388,7 @@ blackmagic_create_device(struct pci_dev *pdev)
 		goto fail;
 
 	snprintf(name, NAME_MAX_LEN, "blackmagic!dv%d", ddev->id);
-	
+
 	INIT_LIST_HEAD(&ddev->entry);
 	atomic_set(&ddev->ready, 0);
 	ddev->flags = 0;
@@ -391,10 +401,10 @@ blackmagic_create_device(struct pci_dev *pdev)
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 32)
 	ddev->mdev.mode = 0666;
 #endif
-	
+
 	if (misc_register(&ddev->mdev) != 0)
 		goto fail;
-	
+
 	pci_set_drvdata(pdev, ddev);
 	ddev->pdev = pci_dev_get(pdev);
 
@@ -435,10 +445,10 @@ blackmagic_destroy_device(struct blackmagic_device *ddev)
 	spin_lock(&blackmagic_devices_lock);
 	list_del(&ddev->entry);
 	spin_unlock(&blackmagic_devices_lock);
-	
+
 	if (ddev->mdev.name)
 		kfree(ddev->mdev.name);
-	
+
 	pci_dev_put(ddev->pdev);
 	pci_set_drvdata(ddev->pdev, NULL);
 	ddev->pdev = NULL;
@@ -557,14 +567,14 @@ blackmagic_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		if (blackmagic_serial_probe(ddev, &pdev->dev))
 			return -ENODEV;
 	}
-	
+
 	dl_info("Successfully loaded device \"%s\" [pci@%04x:%02x:%02x.%d]\n",
 		ddev->mdev.name,
 		pci_domain_nr(ddev->pdev->bus),
 		ddev->pdev->bus->number,
 		PCI_SLOT(ddev->pdev->devfn),
 		PCI_FUNC(ddev->pdev->devfn));
-	
+
 	atomic_inc(&ddev->ready);
 	/* increment usage count (not safe to unload this driver yet) */
 	return 0; /* Yay */
@@ -594,7 +604,7 @@ static int blackmagic_resume(struct pci_dev *pdev)
 		pci_get_drvdata(pdev);
 
 	blackmagic_resume_driver(ddev->driver);
-	
+
 	return 0;
 }
 
@@ -606,7 +616,7 @@ static void blackmagic_remove(struct pci_dev *pdev)
 {
 	struct blackmagic_device *ddev = (struct blackmagic_device *)
 		pci_get_drvdata(pdev);
-	
+
 	dl_info("Shutting down device \"%s\" [pci@%04x:%02x:%02x.%d]\n",
 		ddev->mdev.name,
 		pci_domain_nr(pdev->bus),
@@ -638,11 +648,11 @@ static int __init pci_blackmagic_init(void)
 	int ret;
 
 	blackmagic_lib_init();
-    
+
 	ret = blackmagic_serial_init();
 	if (ret)
 		return ret;
-    
+
     dl_info("Loading driver (version: 10.4a17)\n");
 	return pci_register_driver(&pci_driver);
 }
diff --git a/usr/src/blackmagic-io-10.4a17/bm_util.c b/usr/src/blackmagic-io-10.4a17/bm_util.c
index 0850d0c..30516e8 100644
--- a/usr/src/blackmagic-io-10.4a17/bm_util.c
+++ b/usr/src/blackmagic-io-10.4a17/bm_util.c
@@ -7,14 +7,14 @@
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
-** 
+**
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
-** 
+**
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
@@ -135,7 +135,7 @@ void* bm_alloc_aligned(size_t size, uint32_t flags)
 
 	mem = (vm_address_t)kmalloc(alloc_size, GFP_KERNEL);
 
-	if (mem == NULL && (flags & BM_ALLOC_CONTIGUOUS) == 0)
+	if (!mem && (flags & BM_ALLOC_CONTIGUOUS) == 0)
 	{
 		// Couldn't allocate with kmalloc, so try vmalloc
 		used_vmalloc = true;
@@ -816,7 +816,7 @@ void bm_fpu_begin(void)
 #else
 	struct thread_info *thread;
 	thread = current_thread_info();
-	
+
 	preempt_disable();
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 2, 8)
 	if (__thread_has_fpu(current))
diff --git a/usr/src/blackmagic-io-10.4a17/bmio_audio.c b/usr/src/blackmagic-io-10.4a17/bmio_audio.c
index fb30d2a..90afc9c 100644
--- a/usr/src/blackmagic-io-10.4a17/bmio_audio.c
+++ b/usr/src/blackmagic-io-10.4a17/bmio_audio.c
@@ -7,14 +7,14 @@
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
-** 
+**
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
-** 
+**
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
@@ -25,6 +25,7 @@
 ** -LICENSE-END-
 */
 #include <linux/module.h>
+#include <linux/pci.h>
 #include <linux/slab.h>
 #include <linux/wait.h>
 #include <linux/version.h>
@@ -375,7 +376,7 @@ static int create_sound_card(struct device *parent, int idx, const char *xid, st
 		snd_card_set_dev(*card_ret, parent);
 	return r;
 }
-#else
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(3, 16, 0)
 static int create_sound_card(struct device *parent, int idx, const char *xid, struct module *module, int extra_size, struct snd_card **card_ret)
 {
 	return snd_card_new(parent, idx, xid, module, extra_size, card_ret);
@@ -387,7 +388,11 @@ static int bmio_audio_init_sound_card(bmio_audio_t* aud)
 	struct snd_card* card;
 	int r;
 
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 16, 0)
 	r = create_sound_card(bmio_driver_device(aud->drv), -1, "BlackmagicIO", THIS_MODULE, 0, &card);
+	#else
+	r = snd_card_new(&aud->drv->pci->pdev->dev, -1, "BlackmagicIO", THIS_MODULE, 0, &card);
+	#endif
 	if (r < 0)
 		return r;
 
diff --git a/usr/src/blackmagic-io-10.4a17/bmio_client.c b/usr/src/blackmagic-io-10.4a17/bmio_client.c
index 434c7fa..17f1d2b 100644
--- a/usr/src/blackmagic-io-10.4a17/bmio_client.c
+++ b/usr/src/blackmagic-io-10.4a17/bmio_client.c
@@ -7,14 +7,14 @@
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
-** 
+**
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
-** 
+**
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
@@ -91,7 +91,9 @@ static int bmio_open(struct inode *inode, struct file *filp)
 	bmio_client_t* cli;
 	bmio_driver_t* drv;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+	drv = bmio_driver_find_by_inode(file_inode(filp));
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
 	drv = bmio_driver_find_by_inode(filp->f_dentry->d_inode);
 #else
 	drv = bmio_driver_find_by_inode(inode);
